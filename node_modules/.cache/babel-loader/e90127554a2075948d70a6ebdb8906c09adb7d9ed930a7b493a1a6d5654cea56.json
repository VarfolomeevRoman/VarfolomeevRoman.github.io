{"ast":null,"code":"export class Mesh {\n  constructor(_ref) {\n    let {\n      w,\n      h\n    } = _ref;\n    this.maxDist = Math.hypot(w, h);\n    this.stepX = this.maxDist * .1;\n    this.stepY = this.stepX * Math.sqrt(3) / 2;\n    this.extraPoints = 3;\n    this.cols = (w / this.stepX | 0) + this.extraPoints;\n    this.rows = (h / this.stepY | 0) + this.extraPoints;\n    this.extraOffsetX = this.stepX / 4;\n    this.offsetX = (w - (this.cols - 1) * this.stepX) / 2;\n    this.offsetY = (h - (this.rows - 1) * this.stepY) / 2;\n    this.colorTimer = 0;\n    this.colorSpeed = 30;\n    this.colorPalet = 160;\n    this.createParticles();\n    this.createTriangles();\n  }\n  createParticles() {\n    this.particles = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        const shiftX = i & 1 ? -this.extraOffsetX : this.extraOffsetX;\n        const x = j * this.stepX + this.offsetX + shiftX;\n        const y = i * this.stepY + this.offsetY;\n        const homeX = x;\n        const homeY = y;\n        const angle = Math.random() * Math.PI * 2;\n        const radius = Math.random() * this.extraOffsetX / 2 + this.extraOffsetX;\n        const velocity = Math.random() * 2 - 1;\n        this.particles.push({\n          x,\n          y,\n          homeX,\n          homeY,\n          angle,\n          radius,\n          velocity\n        });\n      }\n    }\n  }\n  createTriangles() {\n    this.triangles = [];\n    for (let y = 0; y < this.rows - 1; y++) {\n      const vertices = [];\n      for (let x = 0; x < this.cols; x++) {\n        let a = x + this.cols * (y + 1);\n        let b = x + this.cols * y;\n        if (y & 1) {\n          [a, b] = [b, a];\n        }\n        vertices.push(this.particles[a], this.particles[b]);\n      }\n      for (let i = 0; i < vertices.length - 2; i++) {\n        const a = vertices[i];\n        const b = vertices[i + 1];\n        const c = vertices[i + 2];\n        this.triangles.push({\n          a,\n          b,\n          c\n        });\n      }\n    }\n  }\n  updateParticles() {\n    let correction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    this.particles.forEach(p => {\n      p.angle += p.velocity * correction;\n      p.x = Math.cos(p.angle) * p.radius + p.homeX;\n      p.y = Math.sin(p.angle) * p.radius + p.homeY;\n    });\n  }\n  updateTriangles() {\n    let correction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    this.colorTimer = (this.colorTimer + this.colorSpeed * correction) % 360;\n  }\n  renderParticles(ctx) {\n    ctx.fillStyle = `red`;\n    const radius = 5;\n    this.particles.forEach(p => {\n      ctx.beginPath();\n      ctx.arc(p.x, p.y, radius, 0, Math.PI * 2);\n      ctx.fill();\n    });\n  }\n  renderTriangles(ctx) {\n    this.triangles.forEach(t => {\n      const {\n        a,\n        b,\n        c\n      } = t;\n      const posX = (a.x + b.x + c.x) / 3;\n      const posY = (a.y + b.y + c.y) / 3;\n      const dist = Math.hypot(posX, posY);\n      const hue = dist / this.maxDist * this.colorPalet - this.colorTimer;\n      ctx.strokeStyle = `hsl(${hue}, 70%, 70%)`;\n      ctx.fillStyle = `hsl(${hue}, 85%, 50%)`;\n      ctx.beginPath();\n      ctx.moveTo(a.x, a.y);\n      ctx.lineTo(b.x, b.y);\n      ctx.lineTo(c.x, c.y);\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n    });\n  }\n}","map":{"version":3,"names":["Mesh","constructor","w","h","maxDist","Math","hypot","stepX","stepY","sqrt","extraPoints","cols","rows","extraOffsetX","offsetX","offsetY","colorTimer","colorSpeed","colorPalet","createParticles","createTriangles","particles","i","j","shiftX","x","y","homeX","homeY","angle","random","PI","radius","velocity","push","triangles","vertices","a","b","length","c","updateParticles","correction","forEach","p","cos","sin","updateTriangles","renderParticles","ctx","fillStyle","beginPath","arc","fill","renderTriangles","t","posX","posY","dist","hue","strokeStyle","moveTo","lineTo","closePath","stroke"],"sources":["/home/roman/Desktop/portfolio__bg/potrfolio-react (copy)/src/components/background/helpers/mesh.js"],"sourcesContent":["export class Mesh {\n  constructor( {w, h} ) {\n    this.maxDist = Math.hypot(w, h);\n    \n    this.stepX = this.maxDist * .1;\n    this.stepY = this.stepX * Math.sqrt(3) / 2;\n\n    this.extraPoints = 3;\n    this.cols = (w / this.stepX | 0) + this.extraPoints;\n    this.rows = (h / this.stepY | 0) + this.extraPoints;\n\n    this.extraOffsetX = this.stepX / 4;\n    this.offsetX = (w - (this.cols - 1) * this.stepX) / 2;\n    this.offsetY = (h - (this.rows - 1) * this.stepY) / 2;\n\n    this.colorTimer = 0;\n    this.colorSpeed = 30;\n    this.colorPalet = 160;\n\n    this.createParticles();\n    this.createTriangles();\n  }\n  createParticles() {\n    this.particles = [];\n    for (let i = 0 ; i < this.rows ; i++) {\n      for (let j = 0 ; j < this.cols ; j++) {\n        const shiftX = i & 1 ? -this.extraOffsetX : this.extraOffsetX;\n\n        const x = j * this.stepX + this.offsetX + shiftX;\n        const y = i * this.stepY + this.offsetY;\n        const homeX = x;\n        const homeY = y;\n\n        const angle = Math.random() * Math.PI * 2;\n        const radius = Math.random() * this.extraOffsetX / 2 + this.extraOffsetX;\n        const velocity = Math.random() * 2 - 1;\n\n        this.particles.push({x, y, homeX, homeY, angle, radius, velocity});\n      }\n    }\n  }\n  createTriangles() {\n    this.triangles = [];\n    for (let y = 0 ; y < this.rows - 1 ; y++) {\n      const vertices = [];\n      for (let x = 0 ; x < this.cols ; x++) {\n        let a = x + this.cols * (y + 1);\n        let b = x + this.cols * y;\n\n        if (y & 1) { [a, b] = [b, a] }\n\n        vertices.push(this.particles[a], this.particles[b]);\n      }\n      for (let i = 0 ; i < vertices.length - 2 ; i++) {\n        const a = vertices[i];\n        const b = vertices[i + 1];\n        const c = vertices[i + 2];\n\n        this.triangles.push( {a, b ,c} );\n      }\n    }\n  }\n  updateParticles(correction = 0) {\n    this.particles.forEach(p => {\n      p.angle += p.velocity * correction;\n\n      p.x = Math.cos(p.angle) * p.radius + p.homeX;\n      p.y = Math.sin(p.angle) * p.radius + p.homeY;\n    });\n  }\n  updateTriangles(correction = 0) {\n    this.colorTimer = (this.colorTimer + this.colorSpeed * correction) % 360;\n  }\n  renderParticles(ctx) {\n    ctx.fillStyle = `red`;\n    const radius = 5;\n    this.particles.forEach(p => {\n      ctx.beginPath();\n      ctx.arc(p.x, p.y, radius, 0, Math.PI * 2);\n      ctx.fill();\n    });\n  }\n  renderTriangles(ctx) {\n      this.triangles.forEach(t => {\n        const {a, b, c} = t;\n\n        const posX = (a.x + b.x + c.x) / 3;\n        const posY = (a.y + b.y + c.y) / 3;\n        const dist = Math.hypot(posX, posY);\n        \n        const hue = dist / this.maxDist * this.colorPalet - this.colorTimer;\n\n        ctx.strokeStyle = `hsl(${hue}, 70%, 70%)`\n        ctx.fillStyle = `hsl(${hue}, 85%, 50%)`;\n\n        ctx.beginPath();\n        ctx.moveTo(a.x, a.y);\n        ctx.lineTo(b.x, b.y);\n        ctx.lineTo(c.x, c.y);\n        ctx.closePath();\n\n        ctx.fill();\n        ctx.stroke();\n      });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}